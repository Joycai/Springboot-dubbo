plugins {
    id 'org.springframework.boot' version '2.3.9.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
    id "org.jetbrains.kotlin.jvm" version "1.4.20" apply true
    id 'org.jetbrains.kotlin.plugin.serialization' version "1.4.20" apply true
    id "org.jetbrains.kotlin.plugin.spring" version "1.4.20" apply false
    id "org.jetbrains.kotlin.plugin.noarg" version "1.4.20" apply true
    id "jacoco"
    id "org.sonarqube" version "3.0"
}
allprojects {
    group 'joycai'
    version '0.0.1-SNAPSHOT'
}

repositories {
    jcenter()
    mavenCentral()
}

ext {
    curatorVersion = "5.1.0"
    dubboVersion = "2.7.8"
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.projectKey", "Joycai_Springboot-dubbo"
        property "sonar.organization", "joycai"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/repository/spring' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        implementation "com.alibaba:dubbo-registry-nacos:2.7.7"
        implementation "com.alibaba.nacos:nacos-client:2.1.0"
        implementation 'com.alibaba.spring:spring-context-support:1.0.11'
        implementation 'org.apache.commons:commons-lang3:3.12.0'
        implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.1"
        implementation "ch.qos.logback:logback-classic:1.2.+"
        implementation "com.google.guava:guava:29.0-jre"
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation 'org.mockito:mockito-core:3.6.28'
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = "0.8.4"
    }

    jacocoTestReport {
        dependsOn test
        afterEvaluate {
            getClassDirectories().setFrom(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/Application**',
                                            '**/MyConfig**',
                                            '**/SchedulingConfig**'])
            })
        }
        reports {
            xml.enabled true
            csv.enabled false
            html.enabled true
        }
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
        }
    }

    tasks.withType(Test) {
        scanForTestClasses = false
        include "**/*Test.class"
    }
}

project(":core") {
    dependencies {

    }
}

project(":client") {
    dependencies {
        implementation(project(':core'))
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.10.+")
        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation("org.apache.dubbo:dubbo-serialization-fst:$dubboVersion")
        implementation("org.apache.dubbo:dubbo-spring-boot-starter:$dubboVersion") {
            exclude group: 'org.springframework'
            exclude group: 'javax.servlet', module: "servlet-api"
            exclude group: 'log4j', module: "log4j"

        }
        runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}

project(":provider") {
    dependencies {
        implementation(project(':core'))
        implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.10.+")
        implementation('org.springframework.boot:spring-boot-starter-web')
        implementation("org.apache.dubbo:dubbo-serialization-fst:$dubboVersion")
        implementation("org.apache.dubbo:dubbo-spring-boot-starter:$dubboVersion") {
            exclude group: 'org.springframework'
            exclude group: 'javax.servlet', module: "servlet-api"
            exclude group: 'log4j', module: "log4j"
        }
        runtimeOnly 'org.springframework.boot:spring-boot-starter-tomcat'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }
}
